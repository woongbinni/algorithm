/********************************************************************************
## 문제
여행을 떠난 세준이는 지도를 하나 구하였다. 이 지도는 아래 그림과 같이 직사각형 모양이며 여러 칸으로 나뉘어져 있다. 
한 칸은 한 지점을 나타내는데 각 칸에는 그 지점의 높이가 쓰여 있으며, 각 지점 사이의 이동은 지도에서 상하좌우 이웃한 곳끼리만 가능하다.
현재 제일 왼쪽 위 칸이 나타내는 지점에 있는 세준이는 제일 오른쪽 아래 칸이 나타내는 지점으로 가려고 한다. 
그런데 가능한 힘을 적게 들이고 싶어 항상 높이가 더 낮은 지점으로만 이동하여 목표 지점까지 가고자 한다. 위와 같은 지도에서는 다음과 같은 세 가지 경로가 가능하다.
지도가 주어질 때 이와 같이 제일 왼쪽 위 지점에서 출발하여 제일 오른쪽 아래 지점까지 항상 내리막길로만 이동하는 경로의 개수를 구하는 프로그램을 작성하시오.
경우의 수가 많기 때문에 전체 경우를 1234567로 나눈 가짓수를 출력한다.
 
## 입력
첫째 줄에는 지도의 세로의 크기 M과 가로의 크기 N이 빈칸을 사이에 두고 주어진다. 이어 다음 M개 줄에 걸쳐 한 줄에 N개씩 위에서부터 
차례로 각 지점의 높이가 빈 칸을 사이에 두고 주어진다. M과 N은 각각 500이하의 자연수이고, 각 지점의 높이는 1,000,000이하의 자연수이다.
 
## 출력
첫째 줄에 이동 가능한 경로의 수 H를 출력한다. 경우의 수가 많아 질 수 있기 때문에 전체 경우를 1234567로 나눈 나머지를 출력한다.
 
## 입력 예제
4 5
50 45 37 32 30
35 50 40 20 25
30 30 25 17 28
27 24 22 15 10
 
## 출력 예제
3
********************************************************************************/
 
 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 
int M, N;
int map[501][501];
int dp[501][501];
bool visited[501][501];
int result = 0;
int dx[4] = {1, 0, -1, 0};
int dy[4] = {0, -1, 0, 1};
 
int solve(int cur_x, int cur_y){
	int &retVal = dp[cur_y][cur_x];
	if(visited[cur_y][cur_x]){
		return retVal;
	}
	visited[cur_y][cur_x] = true;
	retVal = 0;
 
    for(int i=0; i<4; ++i){
        if(cur_x+dx[i] >= 1 && cur_x+dx[i] <= N && cur_y+dy[i] >= 1 && cur_y+dy[i] <= M){
            if(map[cur_y+dy[i]][cur_x+dx[i]] > map[cur_y][cur_x]){
                retVal = (retVal + solve(cur_x+dx[i], cur_y+dy[i])) % 1234567;
            }
        }
    }
    return retVal;
}
 
int main(void){
 
    scanf("%d%d", &M, &N);
 
    for(int i=1; i<=M; ++i){
        for(int j=1; j<=N; ++j){
            scanf("%d", &(map[i][j]));
        }
    }

    dp[1][1] = visited[1][1] = 1;
  
    printf("%d\n", solve(N, M));
 
    return 0;
}